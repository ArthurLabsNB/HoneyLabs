✅ FASE 0 — Objetivo general
Reemplazar completamente el sistema anterior de minijuegos y construir uno nuevo que permita:

Subir archivos ROM (.gba, .nes)

Guardarlos en base de datos

Jugar desde el navegador con emulación funcional

Todo embebido y oculto dentro de la página /docs, accesible solo mediante un botón especial.

🚮 FASE 1 — Eliminación del sistema anterior
🔧 Archivos a eliminar
src/app/docs/minijuegos/ → eliminar carpeta completa si contiene código viejo.

src/app/docs/MinijuegoLoader.tsx → eliminar archivo, será reemplazado.

Eliminar cualquier lógica antigua de minijuegos de page.tsx.

🗃️ Base de datos
Si existe una tabla anterior llamada Minijuego, Juego, etc., con estructura obsoleta:

Eliminarla de schema.prisma

Ejecutar:

bash
Copiar
Editar
npx prisma migrate dev --name remove_old_minijuego
🏗️ FASE 2 — Preparación de carpetas y base
📁 Crear nueva estructura
src/app/docs/minijuegos/

PanelMinijuegos.tsx

SubirRomForm.tsx

ListaJuegos.tsx

EmuladorGBA.tsx

EmuladorNES.tsx

src/app/api/minijuegos/

upload.ts

index.ts

[id].ts

public/emuladores/

Ejecutar:

bash
Copiar
Editar
mkdir -p public/emuladores
git clone https://github.com/endrift/gbajs.git public/emuladores/gbajs
public/roms/ para almacenar los ROMs subidos.

🧬 FASE 3 — Creación del nuevo modelo en Prisma

Comando:
bash
Copiar
Editar
🧩 FASE 4 — Componente oculto en /docs
En src/app/docs/page.tsx:
Importar y usar el botón oculto:

tsx
Copiar
Editar
'use client';
import { useState } from 'react';
import PanelMinijuegos from './minijuegos/PanelMinijuegos';

export default function DocumentosPage() {
  const [mostrarJuegos, setMostrarJuegos] = useState(false);

  return (
    <main>
      {/* Resto del contenido de documentos */}
      <button
        className="text-sm text-gray-400 hover:text-white"
        onClick={() => setMostrarJuegos(prev => !prev)}
      >
        🎮 Minijuegos (secreto)
      </button>

      {mostrarJuegos && <PanelMinijuegos />}
    </main>
  );
}
🧱 FASE 5 — Desarrollo del nuevo sistema
1. PanelMinijuegos.tsx
Contenedor general que incluye SubirRomForm y ListaJuegos.

2. SubirRomForm.tsx
Formulario para subir ROMs (.gba, .nes) con campos:

Nombre

Plataforma

Archivo

Botón “Subir”

→ Llama a /api/minijuegos/upload.

3. ListaJuegos.tsx
Lista de juegos subidos, cada uno con:

Nombre

Plataforma

Botón “Jugar”

Botón “Eliminar”

4. EmuladorGBA.tsx
Carga emulador GBA desde iframe apuntando a /emuladores/gbajs/index.html?rom=....

5. EmuladorNES.tsx
Canvas que usa jsnes para renderizar ROM cargado desde /public/roms.

🌐 FASE 6 — API funcional
1. /api/minijuegos/upload.ts
Recibe archivo ROM

Guarda en /public/roms/

Inserta registro en base de datos

Requiere usar formidable o next-formidable para multipart.

2. /api/minijuegos/index.ts
GET: Retorna todos los juegos del usuario

3. /api/minijuegos/[id].ts
GET: Info individual

DELETE: Eliminar archivo y registro

🎯 FASE 8 — Extras recomendados
✅ Validación de archivos (.gba, .nes únicamente)

✅ Limitar tamaño máximo de ROM

🧠 Guardar progreso con localStorage o IndexedDB

🕹️ Soporte para teclado + gamepad

📸 Generar portada o thumbnail (a futuro)

🔐 Permitir que sólo el usuario vea sus propios juegos
