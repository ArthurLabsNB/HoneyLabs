// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
// 🌐 Generador y fuente de datos
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// 🏢 Modelo de ENTIDADES (empresas, instituciones, etc.)
//
model Entidad {
  id             Int       @id @default(autoincrement())
  nombre         String
  tipo           String                     // ej: 'institucional', 'empresarial'
  correoContacto String
  telefono       String?
  direccion      String?
  fechaCreacion  DateTime  @default(now())
  almacenes      Almacen[]
  roles          Rol[]
  usuarios       Usuario[]
}

//
// 👤 Modelo de USUARIOS
//
model Usuario {
  id            Int              @id @default(autoincrement())
  nombre        String
  apellidos     String
  correo        String           @unique
  contrasena    String
  googleId      String?          // Para login alternativo con Google (futuro)
  tipoCuenta    String           // 'estandar', 'institucional', etc.
  estado        String           @default("pendiente")  // 'pendiente' o 'activo'
  fechaRegistro DateTime         @default(now())

  // 🔗 Asociación con entidad si aplica
  entidadId     Int?
  entidad       Entidad?         @relation(fields: [entidadId], references: [id])

  // 📎 Soporte para validación de cuenta
  archivoBuffer Bytes?
  archivoNombre String?
  codigoUsado   String?

  // 🔗 Relaciones múltiples
  almacenes     UsuarioAlmacen[]
  roles         Rol[]            @relation("RolToUsuario")
  movimientos   Movimiento[]

  // 🔗 Relaciones con minijuegos
  puntajesPacman       PuntajePacman[]
  puntajesMario        PuntajeMario[]
  puntajesSnake        PuntajeSnake[]
  puntajesTetris       PuntajeTetris[]
  puntajesPingPong     PuntajePingPong[]
  puntajesBreakout     PuntajeBreakout[]
  puntajesFlappyBee    PuntajeFlappyBee[]
  puntajesSpaceShooter PuntajeSpaceShooter[]
}

//
// 🎭 Roles personalizados
//
model Rol {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String?
  permisos    String                 // JSON string con permisos
  entidadId   Int?
  entidad     Entidad?  @relation(fields: [entidadId], references: [id])
  usuarios    Usuario[] @relation("RolToUsuario")
}

//
// 📦 Almacenes físicos o virtuales
//
model Almacen {
  id                      Int              @id @default(autoincrement())
  nombre                  String
  descripcion             String?
  imagenUrl               String?
  codigoUnico             String           @unique
  funciones               String?
  permisosPredeterminados String?
  fechaCreacion           DateTime         @default(now())

  // 🔗 Relación con Entidad
  entidadId   Int
  entidad     Entidad          @relation(fields: [entidadId], references: [id])

  // 🔗 Códigos de registro, usuarios conectados
  codigos     CodigoAlmacen[]
  usuarios    UsuarioAlmacen[]
  movimientos Movimiento[]
}

//
// 🔑 Relación muchos-a-muchos entre usuarios y almacenes
//
model UsuarioAlmacen {
  id            Int     @id @default(autoincrement())
  usuarioId     Int
  almacenId     Int
  rolEnAlmacen  String  @db.VarChar(50)
  permisosExtra String?

  usuario       Usuario @relation(fields: [usuarioId], references: [id])
  almacen       Almacen @relation(fields: [almacenId], references: [id])

  @@unique([usuarioId, almacenId]) // No puede estar dos veces en el mismo almacén
}

//
// 🧾 Códigos generados por entidades para registrar afiliados
//
model CodigoAlmacen {
  id              Int       @id @default(autoincrement())
  almacenId       Int
  codigo          String    @unique
  rolAsignado     String    @db.VarChar(50)
  permisos        String?
  usosDisponibles Int?
  activo          Boolean   @default(true)
  fechaCreacion   DateTime  @default(now())
  fechaExpiracion DateTime?
  creadoPorId     Int?

  almacen         Almacen   @relation(fields: [almacenId], references: [id])
}

//
// 📊 Movimientos de almacén (entradas y salidas)
//
model Movimiento {
  id          Int       @id @default(autoincrement())
  tipo        String    // 'entrada' o 'salida'
  cantidad    Int
  fecha       DateTime  @default(now())
  descripcion String?

  // 🔗 Relación con almacén
  almacenId   Int
  almacen     Almacen   @relation(fields: [almacenId], references: [id], onDelete: Cascade)

  // 🔗 Relación opcional con usuario que hizo el movimiento
  usuarioId   Int?
  usuario     Usuario?  @relation(fields: [usuarioId], references: [id])
}

//
// 🎮 PACMAN
//
model PuntajePacman {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  puntaje   Int
  fecha     DateTime @default(now())
}

//
// 🎮 MARIO BROS
//
model PuntajeMario {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  nivel     Int      // nivel más alto alcanzado
  puntaje   Int      // score total
  fecha     DateTime @default(now())
}

//
// 🎮 SNAKE
//
model PuntajeSnake {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  longitud  Int      // longitud máxima alcanzada
  puntaje   Int      // puntos totales
  fecha     DateTime @default(now())
}

//
// 🎮 TETRIS
//
model PuntajeTetris {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  lineas    Int      // líneas completadas
  puntaje   Int      // score total
  fecha     DateTime @default(now())
}

//
// 🎮 PING PONG
//
model PuntajePingPong {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  rondas    Int      // rondas ganadas
  puntaje   Int      // score final
  fecha     DateTime @default(now())
}

//
// 🎮 BREAKOUT
//
model PuntajeBreakout {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  nivel     Int      // nivel máximo
  puntaje   Int      // puntos
  fecha     DateTime @default(now())
}

//
// 🎮 FLAPPYBEE
//
model PuntajeFlappyBee {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  distancia Int      // distancia recorrida
  puntaje   Int      // puntos
  fecha     DateTime @default(now())
}

//
// 🎮 SPACESHOOTER
//
model PuntajeSpaceShooter {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  enemigos  Int      // enemigos eliminados
  puntaje   Int      // score total
  fecha     DateTime @default(now())
}
