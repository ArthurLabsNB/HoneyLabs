// ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì
// üåê Generador y fuente de datos
// ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// üèÜ PLANES Y SUSCRIPCIONES
//
model Plan {
  id           Int        @id @default(autoincrement())
  nombre       String     // Ej: 'Free', 'Pro', 'Empresarial'
  descripcion  String?
  precio       Float?
  periodicidad String?    // 'mensual', 'anual'
  limites      String?    // JSON: {almacenes: 2, colaboradores: 5, ...}
  usuarios     Usuario[]
  entidades    Entidad[]
  suscripciones Suscripcion[]
}

model Suscripcion {
  id           Int        @id @default(autoincrement())
  usuarioId    Int?
  entidadId    Int?
  planId       Int
  fechaInicio  DateTime   @default(now())
  fechaFin     DateTime?
  activo       Boolean    @default(true)
  usuario      Usuario?   @relation(fields: [usuarioId], references: [id])
  entidad      Entidad?   @relation(fields: [entidadId], references: [id])
  plan         Plan       @relation(fields: [planId], references: [id])
}

//
// üè¢ ENTIDADES (empresas, instituciones, etc.)
//
model Entidad {
  id             Int          @id @default(autoincrement())
  nombre         String
  tipo           String                     // ej: 'institucional', 'empresarial'
  correoContacto String
  telefono       String?
  direccion      String?
  fechaCreacion  DateTime      @default(now())
  almacenes      Almacen[]
  roles          Rol[]
  usuarios       Usuario[]
  planId         Int?          // Plan activo para la entidad
  plan           Plan?         @relation(fields: [planId], references: [id])
  suscripciones  Suscripcion[]
}

//
// üë§ USUARIOS
//
model Usuario {
  id            Int              @id @default(autoincrement())
  nombre        String
  apellidos     String
  correo        String           @unique
  contrasena    String
  googleId      String?          // Para login alternativo con Google (futuro)
  tipoCuenta    String           // 'estandar', 'institucional', etc.
  estado        String           @default("pendiente")  // 'pendiente', 'activo'
  fechaRegistro DateTime         @default(now())

  // üîó Asociaci√≥n con entidad si aplica
  entidadId     Int?
  entidad       Entidad?         @relation(fields: [entidadId], references: [id])

  // Plan y suscripciones
  planId        Int?             // Plan activo del usuario (si aplica)
  plan          Plan?            @relation(fields: [planId], references: [id])
  suscripciones Suscripcion[]

  // üìé Soporte para validaci√≥n de cuenta
  archivoBuffer Bytes?
  archivoNombre String?
  codigoUsado   String?

  // üîë Seguridad y opciones avanzadas
  fotoPerfil        Bytes?          // Imagen de perfil (BLOB)
  fotoPerfilNombre  String?
  preferencias      String?         // JSON o texto de preferencias/ajustes
  tiene2FA         Boolean?         @default(false)
  metodo2FA        String?          // 'email', 'app', etc.
  codigo2FASecret  String?          // secreto para autenticador

  // üîó Relaciones m√∫ltiples
  almacenes     UsuarioAlmacen[]
  roles         Rol[]            @relation("RolToUsuario")
  movimientos   Movimiento[]

  // üîó Relaciones con minijuegos
  puntajesPacman       PuntajePacman[]
  puntajesMario        PuntajeMario[]
  puntajesSnake        PuntajeSnake[]
  puntajesTetris       PuntajeTetris[]
  puntajesPingPong     PuntajePingPong[]
  puntajesBreakout     PuntajeBreakout[]
  puntajesFlappyBee    PuntajeFlappyBee[]
  puntajesSpaceShooter PuntajeSpaceShooter[]

  // Relaciones a otros m√≥dulos
  eventosCreados       EventoAlmacen[]      @relation("EventosCreados")
  novedadesCreadas     NovedadAlmacen[]     @relation("NovedadesCreadas")
  documentosSubidos    DocumentoAlmacen[]   @relation("DocumentosSubidos")
  incidenciasCreadas   Incidencia[]         @relation("IncidenciasCreadas")
  incidenciasResueltas Incidencia[]         @relation("IncidenciasResueltas")
  notificaciones       Notificacion[]
  bitacoraCambios      BitacoraCambioPerfil[]
  sesiones            SesionUsuario[]
}

//
// üëÅÔ∏è‚Äçüó®Ô∏è BIT√ÅCORA DE CAMBIOS DE PERFIL
//
model BitacoraCambioPerfil {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  cambios    String
  fecha      DateTime @default(now())
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
}

//
// üñ•Ô∏è HISTORIAL DE SESIONES DE USUARIO
//
model SesionUsuario {
  id           Int      @id @default(autoincrement())
  usuarioId    Int
  userAgent    String?
  ip           String?
  fechaInicio  DateTime @default(now())
  fechaUltima  DateTime @default(now())
  activa       Boolean  @default(true)
  usuario      Usuario  @relation(fields: [usuarioId], references: [id])
}

//
// üé≠ ROLES PERSONALIZADOS
//
model Rol {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String?
  permisos    String                 // JSON string con permisos
  entidadId   Int?
  entidad     Entidad?  @relation(fields: [entidadId], references: [id])
  usuarios    Usuario[] @relation("RolToUsuario")
}

//
// üì¶ ALMACENES
//
model Almacen {
  id                      Int              @id @default(autoincrement())
  nombre                  String
  descripcion             String?
  imagenUrl               String?
  codigoUnico             String           @unique
  funciones               String?
  permisosPredeterminados String?
  fechaCreacion           DateTime         @default(now())

  // üîó Relaci√≥n con Entidad
  entidadId   Int
  entidad     Entidad          @relation(fields: [entidadId], references: [id])

  // üîó C√≥digos de registro, usuarios conectados
  codigos     CodigoAlmacen[]
  usuarios    UsuarioAlmacen[]
  movimientos Movimiento[]

  // Nuevos m√≥dulos
  eventos         EventoAlmacen[]
  novedades       NovedadAlmacen[]
  documentos      DocumentoAlmacen[]
  incidencias     Incidencia[]
  notificaciones  Notificacion[]
}

//
// üîë Relaci√≥n muchos-a-muchos entre usuarios y almacenes
//
model UsuarioAlmacen {
  id            Int     @id @default(autoincrement())
  usuarioId     Int
  almacenId     Int
  rolEnAlmacen  String  @db.VarChar(50)
  permisosExtra String?

  usuario       Usuario @relation(fields: [usuarioId], references: [id])
  almacen       Almacen @relation(fields: [almacenId], references: [id])

  @@unique([usuarioId, almacenId]) // No puede estar dos veces en el mismo almac√©n
}

//
// üßæ C√≥digos generados por entidades para registrar afiliados
//
model CodigoAlmacen {
  id              Int       @id @default(autoincrement())
  almacenId       Int
  codigo          String    @unique
  rolAsignado     String    @db.VarChar(50)
  permisos        String?
  usosDisponibles Int?
  activo          Boolean   @default(true)
  fechaCreacion   DateTime  @default(now())
  fechaExpiracion DateTime?
  creadoPorId     Int?

  almacen         Almacen   @relation(fields: [almacenId], references: [id])
}

//
// üìä MOVIMIENTOS DE ALMAC√âN (entradas y salidas)
//
model Movimiento {
  id          Int       @id @default(autoincrement())
  tipo        String    // 'entrada' o 'salida'
  cantidad    Int
  fecha       DateTime  @default(now())
  descripcion String?

  // üîó Relaci√≥n con almac√©n
  almacenId   Int
  almacen     Almacen   @relation(fields: [almacenId], references: [id], onDelete: Cascade)

  // üîó Relaci√≥n opcional con usuario que hizo el movimiento
  usuarioId   Int?
  usuario     Usuario?  @relation(fields: [usuarioId], references: [id])
}

//
// üìÖ EVENTOS DE CALENDARIO POR ALMAC√âN
//
model EventoAlmacen {
  id           Int       @id @default(autoincrement())
  titulo       String
  descripcion  String?
  fechaInicio  DateTime
  fechaFin     DateTime?
  tipo         String?        // ej: 'mantenimiento', 'auditor√≠a', etc.
  archivoUrl   String?
  almacenId    Int
  almacenes    Almacen        @relation(fields: [almacenId], references: [id])
  creadoPorId  Int
  creadoPor    Usuario        @relation("EventosCreados", fields: [creadoPorId], references: [id])
}

//
// üì∞ NOVEDADES Y ANUNCIOS POR ALMAC√âN
//
model NovedadAlmacen {
  id          Int      @id @default(autoincrement())
  titulo      String
  contenido   String
  fecha       DateTime @default(now())
  almacenId   Int
  almacenes   Almacen  @relation(fields: [almacenId], references: [id])
  creadoPorId Int
  creadoPor   Usuario  @relation("NovedadesCreadas", fields: [creadoPorId], references: [id])
}

//
// üîî NOTIFICACIONES (usuario + almac√©n opcional)
//
model Notificacion {
  id          Int      @id @default(autoincrement())
  usuarioId   Int
  mensaje     String
  leida       Boolean  @default(false)
  tipo        String?  // ej: 'evento', 'novedad', etc.
  fecha       DateTime @default(now())
  almacenId   Int?
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  almacenes   Almacen? @relation(fields: [almacenId], references: [id])
}

//
// üìÅ DOCUMENTOS OFICIALES POR ALMAC√âN
//
model DocumentoAlmacen {
  id          Int      @id @default(autoincrement())
  nombre      String
  url         String
  descripcion String?
  fecha       DateTime @default(now())
  version     String?
  almacenId   Int
  almacen     Almacen  @relation(fields: [almacenId], references: [id])
  subidoPorId Int
  subidoPor   Usuario  @relation("DocumentosSubidos", fields: [subidoPorId], references: [id])
}

//
// ‚ö†Ô∏è INCIDENCIAS
//
model Incidencia {
  id            Int      @id @default(autoincrement())
  titulo        String
  descripcion   String
  estado        String   @default("abierta")
  fecha         DateTime @default(now())
  almacenId     Int
  almacen       Almacen  @relation(fields: [almacenId], references: [id])
  creadaPorId   Int
  creadaPor     Usuario  @relation("IncidenciasCreadas", fields: [creadaPorId], references: [id])
  resueltaPorId Int?
  resueltaPor   Usuario? @relation("IncidenciasResueltas", fields: [resueltaPorId], references: [id])
  fechaResuelta DateTime?
}

//
// üéÆ MINIJUEGOS (no cambian)
//
model PuntajePacman {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  puntaje   Int
  fecha     DateTime @default(now())
}

model PuntajeMario {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  nivel     Int
  puntaje   Int
  fecha     DateTime @default(now())
}

model PuntajeSnake {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  longitud  Int
  puntaje   Int
  fecha     DateTime @default(now())
}

model PuntajeTetris {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  lineas    Int
  puntaje   Int
  fecha     DateTime @default(now())
}

model PuntajePingPong {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  rondas    Int
  puntaje   Int
  fecha     DateTime @default(now())
}

model PuntajeBreakout {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  nivel     Int
  puntaje   Int
  fecha     DateTime @default(now())
}

model PuntajeFlappyBee {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  distancia Int
  puntaje   Int
  fecha     DateTime @default(now())
}

model PuntajeSpaceShooter {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  enemigos  Int
  puntaje   Int
  fecha     DateTime @default(now())
}
