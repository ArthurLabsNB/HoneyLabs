Organiza el monorepo
1.1. Crea workspace PNPM/Turbo con: packages/ui, packages/hooks, packages/sdk, packages/db, apps/web, apps/mobile. (Pendiente)
1.2. Usa ESLint + Prettier + Vitest compartidos. (Pendiente)

Capa de base de datos solo‐servidor
2.1. Paquete @honeylabs/db → schema.prisma + prisma-client.ts. (Pendiente)
2.2. En package.json: "browser": { "./prisma-client.ts": "./noop.js" } para que Prisma nunca llegue al cliente. (Pendiente)
2.3. Variables DATABASE_URL únicamente en el entorno backend. (Pendiente)

API tipada
3.1. Implementa route handlers Next 14 (app/api/**/route.ts) o routers tRPC. (Completado)
3.2. Allí se llama a db.*; usa Prisma Accelerate si es edge/serverless. (Pendiente)
3.3. Protege cada endpoint con JWT; aplica Row-Level Security en PostgreSQL. (Completado)

SDK cliente offline-first
4.1. Genera hooks (useInventario, useAlmacén, etc.) con tRPC/GraphQL Codegen. (Pendiente)
4.2. Persiste queries y mutaciones con TanStack Query + Dexie (web) ↔ SQLite (Capacitor). (Pendiente)
4.3. Implementa cola de mutaciones cifrada (txn_id, client_id, ts). (Pendiente)

Sincronización y resolución de conflictos
5.1. Al volver online, POST /sync con lote de ops. (Pendiente)
5.2. Backend: deduplica por txn_id; aplica última versión (updated_at) o merge-patch/CRDT. (Pendiente)
5.3. Devuelve diff; frontend actualiza cache TanStack Query. (Pendiente)
5.4. Propaga cambios en tiempo real vía WebSocket (LISTEN/NOTIFY). (Pendiente)

PWA robusta (web)
6.1. Instala next-pwa; configura Workbox: (Completado)
• UI → Stale-While-Revalidate
• Datos críticos → NetworkFirst
6.2. Activa Background Sync para cola cuando la pantalla esté cerrada. (Pendiente)
6.3. Genera manifest, icons, theme_color. (Pendiente)

Wrapper móvil (Android)
7.1. Opción completa: Capacitor 5 (Pendiente)
– npx cap init → cap add android → cap sync android.
– Plugins: SQLite, Push, Filesystem, Network.
7.2. Opción ultraligera: Trusted Web Activity + Bubblewrap. (Pendiente)
7.3. Configura ProGuard + R8, firma con keystore prod. (Pendiente)

Wrapper desktop opcional
8.1. Tauri (tauri build) para .msi / .dmg / .AppImage (< 20 MB). (Pendiente)

Pipeline de build “on-demand” (botón Descargar App)
9.1. GitHub Action / EAS Build pasos: (Completado)
• npm ci → npm run build (Next)
• cap sync android && cap build android
• Firma APK, sube a GitHub Release / S3 presignado.
9.2. Endpoint /api/build-mobile (Route Handler): (Completado)
• Autentica admin → dispara repository_dispatch → devuelve run_id.
9.3. Frontend abre SSE/WS para progreso; muestra barra y ETA. (Completado)

Página “App” en la web
10.1. Fetch /api/app → {version, url, sha256}. (Completado)
10.2. Si build en curso: spinner y porcentaje. (Completado)
10.3. Botón <a download> con SHA-256 visible para confianza. (Completado)

Actualización continua (snapshot)
11.1. Cada merge a main: pruebas → prisma migrate deploy → genera nueva APK; nombre HoneyLabs-YYYYMMDDHH.apk. (Pendiente)
11.2. Backend publica /version con número + enlace. (Pendiente)
11.3. App al abrir: comprueba /version; si mayor, descarga en segundo plano (Capacitor Live Update o propia), verifica firma, reinicia. (Pendiente)

Persistencia offline perfecta
12.1. Todas las escrituras primero a store local (Dexie/SQLite). (Pendiente)
12.2. Marcadas con pending=true. (Pendiente)
12.3. Éxito de sync ➜ marca pending=false; error retriable → re-queue. (Pendiente)

Prevención de duplicados/pérdidas
13.1. Llave primaria compuesta (id, client_id). (Pendiente)
13.2. Postgres ON CONFLICT DO NOTHING para idempotencia. (Pendiente)
13.3. Soft-delete (deleted_at) en vez de DELETE físico. (Pendiente)

Seguridad adicional
14.1. TLS 1.3 + certificate pinning móvil. (Pendiente)
14.2. URLs de descarga presignadas válidas 15 min. (Pendiente)
14.3. Ofusca JS/WASM con Terser; R8 full-mode. (Pendiente)
14.4. Licencia propietaria + obfuscación cadena de texto. (Pendiente)

Control de versiones de datos
15.1. Añade columna version incremental. (Pendiente)
15.2. Durante merge, conserva mayor version. (Pendiente)

QA automática
16.1. Vitest backend y frontend. (Completado)
16.2. Playwright e2e para PWA. (Pendiente)
16.3. Detox (Capacitor) para móvil. (Pendiente)

Monitoreo y telemetry
17.1. Sentry (web + móvil). (Pendiente)
17.2. Supabase Logflare o Grafana Loki para logs. (Pendiente)
17.3. Postgres pg_stat_statements para detectar consultas lentas. (Pendiente)

Auditoría del bundle
18.1. webpack-bundle-analyzer asegure cero @prisma/client/pg. (Pendiente)
18.2. Alias cliente: resolve.alias["@honeylabs/db"] = false. (Pendiente)

Registro de cambios (changelog)
19.1. Genera automáticamente con Conventional Commits (release-please). (Pendiente)
19.2. Muestra notas en la app cuando hay actualización mayor. (Pendiente)

Documentación interna
20.1. README por paquete. (Pendiente)
20.2. Diagrama de flujo sync (Mermaid) en /docs. (Pendiente)
