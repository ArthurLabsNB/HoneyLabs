¿Qué problema tiene tu código?
En API Routes de Next.js App Router (route.ts), los parámetros dinámicos (params) NO se pasan como segundo argumento en los handlers (GET, POST, etc).

Por eso params.id es undefined y al hacer Number(params.id) te da el error.

¿Cómo se soluciona?
Debes obtener el ID desde la URL así:
ts
Copiar
Editar
// Para /api/almacenes/[id]/materiale
const idParam = req.nextUrl.pathname.split("/").reverse()[2]; // obtiene el id dinámico antes de "materiales"
const almacenId = Number(idParam);
Otra forma: puedes parsear con regex si tu path tiene variaciones, pero esto es directo y robusto para la estructura /api/almacenes/[id]/materiales.

Tu archivo corregido
Reemplaza la definición de tus handlers así:


Copiar
Editar
export const runtime = 'nodejs'

import { NextRequest, NextResponse } from 'next/server'
import prisma from '@lib/prisma'
import { getUsuarioFromSession } from '@lib/auth'
import { hasManagePerms } from '@lib/permisos'
import crypto from 'node:crypto'
import * as logger from '@lib/logger'

function getAlmacenIdFromRequest(req: NextRequest): number | null {
  // Estructura: /api/almacenes/[id]/materiales
  const parts = req.nextUrl.pathname.split('/');
  // Busca la posición del segmento 'almacenes' y toma el siguiente valor como id
  const idx = parts.findIndex(x => x === 'almacenes');
  const id = idx !== -1 && parts.length > idx + 1 ? Number(parts[idx + 1]) : null;
  return id && !Number.isNaN(id) ? id : null;
}

export async function GET(req: NextRequest) {
  try {
    const usuario = await getUsuarioFromSession()
    if (!usuario) return NextResponse.json({ error: 'No autenticado' }, { status: 401 })

    const almacenId = getAlmacenIdFromRequest(req);
    if (!almacenId) {
      return NextResponse.json({ error: 'ID inválido' }, { status: 400 })
    }

    const pertenece = await prisma.usuarioAlmacen.findFirst({
      where: { usuarioId: usuario.id, almacenId },
      select: { id: true },
    })
    if (!pertenece && !hasManagePerms(usuario)) {
      return NextResponse.json({ error: 'Sin permisos' }, { status: 403 })
    }

    const materiales = await prisma.material.findMany({
      where: { almacenId },
      orderBy: { id: 'asc' },
      select: {
        id: true,
        nombre: true,
        descripcion: true,
        miniaturaNombre: true,
        cantidad: true,
        unidad: true,
        lote: true,
        fechaCaducidad: true,
        ubicacion: true,
        proveedor: true,
        estado: true,
        observaciones: true,
        codigoBarra: true,
        codigoQR: true,
        minimo: true,
        maximo: true,
        fechaRegistro: true,
        fechaActualizacion: true,
      },
    })

    return NextResponse.json({ materiales })
  } catch (err) {
    logger.error('GET /api/almacenes/[id]/materiales', err)
    return NextResponse.json({ error: 'Error' }, { status: 500 })
  }
}

export async function POST(req: NextRequest) {
  try {
    const usuario = await getUsuarioFromSession()
    if (!usuario) return NextResponse.json({ error: 'No autenticado' }, { status: 401 })

    const almacenId = getAlmacenIdFromRequest(req);
    if (!almacenId) {
      return NextResponse.json({ error: 'ID inválido' }, { status: 400 })
    }

    const pertenece = await prisma.usuarioAlmacen.findFirst({
      where: { usuarioId: usuario.id, almacenId },
      select: { id: true },
    })
    if (!pertenece && !hasManagePerms(usuario)) {
      return NextResponse.json({ error: 'Sin permisos' }, { status: 403 })
    }

    let nombre = ''
    let descripcion = ''
    let miniaturaNombre: string | null = null
    let miniaturaBuffer: Buffer | null = null
    let unidad = ''
    let cantidad = 0
    let lote: string | null = null
    let fechaCaducidad: Date | null = null
    let ubicacion: string | null = null
    let proveedor: string | null = null
    let estado: string | null = null
    let observaciones: string | null = null
    let minimo: number | null = null
    let maximo: number | null = null
    let codigoBarra: string | null = null
    let codigoQR: string | null = null

    if (req.headers.get('content-type')?.includes('multipart/form-data')) {
      const formData = await req.formData()
      nombre = String(formData.get('nombre') ?? '').trim()
      descripcion = String(formData.get('descripcion') ?? '').trim()
      unidad = String(formData.get('unidad') ?? '').trim()
      cantidad = Number(formData.get('cantidad') ?? '0')
      lote = String(formData.get('lote') ?? '').trim() || null
      fechaCaducidad = formData.get('fechaCaducidad') ? new Date(String(formData.get('fechaCaducidad'))) : null
      ubicacion = String(formData.get('ubicacion') ?? '').trim() || null
      proveedor = String(formData.get('proveedor') ?? '').trim() || null
      estado = String(formData.get('estado') ?? '').trim() || null
      observaciones = String(formData.get('observaciones') ?? '').trim() || null
      minimo = formData.get('minimo') ? Number(formData.get('minimo')) : null
      maximo = formData.get('maximo') ? Number(formData.get('maximo')) : null
      codigoBarra = String(formData.get('codigoBarra') ?? '').trim() || null
      codigoQR = String(formData.get('codigoQR') ?? '').trim() || null
      const archivo = formData.get('miniatura') as File | null
      if (archivo) {
        const buffer = Buffer.from(await archivo.arrayBuffer())
        const nombreArchivo = `${crypto.randomUUID()}_${archivo.name}`
        miniaturaNombre = nombreArchivo
        miniaturaBuffer = buffer
      }
    } else {
      const body = await req.json()
      nombre = body.nombre
      descripcion = body.descripcion
      unidad = body.unidad
      cantidad = Number(body.cantidad)
      lote = body.lote || null
      fechaCaducidad = body.fechaCaducidad ? new Date(body.fechaCaducidad) : null
      ubicacion = body.ubicacion || null
      proveedor = body.proveedor || null
      estado = body.estado || null
      observaciones = body.observaciones || null
      minimo = body.minimo ?? null
      maximo = body.maximo ?? null
      codigoBarra = body.codigoBarra || null
      codigoQR = body.codigoQR || null
      miniaturaNombre = body.miniaturaNombre ?? null
    }

    if (!nombre) return NextResponse.json({ error: 'Nombre requerido' }, { status: 400 })
    if (!unidad) return NextResponse.json({ error: 'Unidad requerida' }, { status: 400 })

    const material = await prisma.material.create({
      data: {
        nombre,
        descripcion,
        miniatura: miniaturaBuffer as any,
        miniaturaNombre,
        cantidad,
        unidad,
        lote,
        fechaCaducidad,
        ubicacion,
        proveedor,
        estado,
        observaciones,
        codigoBarra,
        codigoQR,
        minimo,
        maximo,
        almacenId,
        usuarioId: usuario.id,
      },
      select: {
        id: true,
        nombre: true,
        miniaturaNombre: true,
      },
    })

    return NextResponse.json({ material })
  } catch (err) {
    logger.error('POST /api/almacenes/[id]/materiales', err)
    return NextResponse.json({ error: 'Error' }, { status: 500 })
  }
}
¿Qué cambió?
Ya no recibes { params } como segundo argumento, sólo el req.

Obtienes el ID directamente desde la URL usando una función robusta.

El resto de tu lógica se mantiene igual.

¿Por qué así?
Next.js App Router API routes no pasan params como en los pages antiguos o los server components.

Si necesitas más parámetros en rutas anidadas, simplemente extiende la lógica para obtenerlos desde pathname.

