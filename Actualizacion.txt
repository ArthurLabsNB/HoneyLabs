
1. Objetivo General
Actualizar HoneyLabs para soportar de forma profesional y segura:

Todos los tipos de cuenta (individual, empresarial, institucional, código, administrador)

Permisos y roles personalizables a nivel entidad y almacén

Uso avanzado de códigos de registro para acceso limitado o por invitación

Un panel administrativo central para el dueño de la plataforma, con control y visualización total sobre usuarios y sus recursos

UI adaptativa según permisos

Integración sin romper código, sin perder datos y respetando la arquitectura actual

2. Análiis y requerimientos previos
El backend utiliza Prisma + PostgreSQL

El frontend es React (Next.js), CSS modular y Tailwind, con hooks para sesión y autenticación

Existen modelos clave (Usuario, Entidad, Rol, UsuarioAlmacen, CodigoAlmacen, etc.)

Existen campos legacy como tipoCuenta: estandar que debe migrarse a individual

Se requiere máxima compatibilidad hacia atrás

3. Cambios y ampliaciones al Modelo de Datos
3.1. Usuario
Ampliar y estandarizar valores para tipoCuenta: individual, empresarial, institucional, codigo, administrador

Añadir campo booleano esSuperAdmin (opcional) para proteger cuentas principales

Validar que los campos actuales entidadId, planId, roles, codigoUsado funcionen con los nuevos flujos

3.2. Rol
Asegurar que permisos sea un JSON estructurado (no string plano). Si es string, migrar automáticamente

Establecer roles básicos: propietario, admin_entidad, editor, visualizador, supervisor, y permitir roles personalizados por entidad

3.3. UsuarioAlmacen
Validar que rolEnAlmacen y permisosExtra soportan roles y permisos sobrescritos por código o gestión directa

3.4. CodigoAlmacen
Asegurar campos: almacenId, codigo, rolAsignado, permisos, usosDisponibles, activo, fechaExpiracion, creadoPorId

Validar que los códigos puedan limitar:

Acceso sólo a ciertas funciones

Uso temporal o por cantidad

3.5. Bitácora y sesiones
Confirmar integridad de los modelos de bitácora (BitacoraCambioPerfil) y sesiones (SesionUsuario), para rastrear toda actividad administrativa

4. Cambios y ampliaciones a APIs / Backend
4.1. Registro
Adaptar /api/registro para:

Detectar y validar código (codigoUsado)

Asignar automáticamente tipoCuenta y permisos según código

Registrar entidad y plan solo si corresponde

Si es empresa, dejar estado = pendiente hasta validación manual por admin

Prohibir registro de administrador por frontend (sólo backend, seguro)

4.2. Login y Middleware de permisos
Crear un middleware global que, tras login, cargue:

Todos los roles asociados (roles y sus permisos)

Permisos sobrescritos (UsuarioAlmacen)

Plan y límites según entidad o usuario

Si es administrador, marcarlo para acceso total

Todos los endpoints sensibles deben verificar los permisos antes de ejecutar cualquier acción.

4.3. Gestión de códigos
Endpoints para:

Generar código (/api/codigos/generar)

Validar código (/api/codigos/validar)

Revocar código o usos

4.4. Panel de administración
Nuevos endpoints:

/api/admin/usuarios → listado paginado de usuarios con búsqueda avanzada (por correo, tipo, entidad, plan, estado)

/api/admin/usuario/:id → detalles completos de usuario

/api/admin/usuario/:id/impersonar → retorna todos los datos y la vista simulada

/api/admin/usuario/:id/cerrar-sesion → fuerza logout

/api/admin/usuario/:id/reset-password → fuerza reset de contraseña

/api/admin/usuario/:id/historial → bitácora completa de cambios y accesos

/api/admin/almacen/:id → ver recursos del usuario/almacén desde el panel admin

Seguridad:
Todos estos endpoints requieren autenticación de administrador o esSuperAdmin.
El acceso debe ser rastreado en bitácora.

5. Cambios y ampliaciones a la Interfaz Visual (Frontend)
5.1. Componentes y páginas a crear/modificar
/admin/dashboard

Tabla con todos los usuarios registrados

Columnas: Nombre, Correo, tipoCuenta, plan, entidad, estado, última sesión, IP, métodos de 2FA, fecha registro

Indicador si está en sesión activa (SesionUsuario)

Botón "Ver más" o clic en fila para acceder a detalle profundo

Filtro/búsqueda por nombre, correo, tipo de cuenta, plan, entidad, estado, almacenes asociados

/admin/usuario/[id]

Ficha de usuario con:

Todos sus datos: personales, sesión, métodos de acceso, roles, entidad, planes, permisos activos

Acceso a visualizar: almacenes conectados, roles en almacenes, movimientos, incidencias, novedades, documentos subidos, historial de cambios, códigos usados, puntajes de minijuegos

Botón "Impersonar vista" (solo lectura, simula su dashboard)

Botón para "Resetear contraseña", "Forzar logout", "Cambiar estado", "Revocar roles", "Eliminar usuario (soft-delete)"

Auditoría visual de todas las acciones que ha hecho el usuario

/admin/almacen/[id] (opcional)

Vista profunda del almacén: usuarios conectados, permisos, documentos, incidencias, eventos, historial

Panel lateral o menú contextual para acceder rápidamente a:

Usuarios

Entidades

Almacenes

Bitácora global

5.2. Adaptación visual en el dashboard estándar
Usar hook global usePermisos() que combine roles y permisos

Menús, botones y secciones deben mostrarse u ocultarse en tiempo real según permisos

Si el usuario es administrador, mostrar acceso claro y persistente al panel /admin/dashboard

Si el usuario es de tipo codigo, adaptar la UI para ocultar todas las funciones a las que no tiene acceso (crear almacenes, editar inventario, ver estadísticas, etc.)

Tooltips explicativos sobre las funciones restringidas

5.3. Experiencia de usuario administrativa
Las acciones administrativas (reset password, revocar roles, etc.) deben requerir confirmación (modal de "¿Estás seguro?")

Cada acción debe registrar entrada en la bitácora

Cambios deben reflejarse en tiempo real (optimistic UI si es posible)

El panel debe ser responsive, usable en desktop y tablet (no es prioritario para mobile)

6. Migraciones, compatibilidad y pruebas
Crear migración para actualizar todos los usuarios de tipoCuenta = 'estandar' a 'individual'

Asegurar que los roles legacy se mantengan o migren automáticamente

Probar todos los flujos: registro con y sin código, cambio de permisos, acceso y bloqueo por plan, administración de usuarios y almacenes, login y logout forzado, cambios en roles y permisos, uso de códigos y caducidad

Generar pruebas automatizadas para APIs críticas

No eliminar nunca usuarios ni entidades del sistema, aplicar soft delete y auditar siempre

7. Seguridad, control y auditoría
Todos los endpoints de administración deben requerir autenticación fuerte (idealmente con 2FA)

Todas las acciones administrativas y de usuario deben quedar registradas en bitácora (usuario que la hizo, fecha, IP, cambios realizados)

Implementar rate limiting para acciones sensibles (reset, delete, impersonar)

El panel admin nunca debe permitir ver contraseñas en texto plano, sólo el hash y métodos de acceso

8. Consideraciones y notas especiales para la IA
No sobrescribir ni eliminar lógica funcional existente sin replicarla si es necesario (respetar custom hooks, middlewares y handlers)

No romper compatibilidad de migraciones ni seeds

Reutilizar componentes visuales existentes si es posible, solo crear nuevos si no existe nada parecido

La actualización debe ser progresiva y documentada paso a paso

Cualquier funcionalidad extra debe ser comentada y validada con el desarrollador antes de habilitarse en producción

9. Ejemplo visual esperado en /admin/dashboard
Tabla con usuarios y filtro por cada campo

Acceso rápido a entidades, almacenes y bitácora

Sidebar visual para navegación entre secciones administrativas

Detalle por usuario con todos los datos relevantes y acciones contextuales

Modal de impersonar que simula sesión del usuario seleccionado

10. Resultado esperado final
HoneyLabs tendrá un sistema robusto, profesional y seguro de cuentas y administración

Todos los tipos de cuenta tendrán permisos y funciones adaptadas a su uso real

El panel de administrador permitirá gestionar, auditar y visualizar cualquier usuario o recurso, con seguridad y trazabilidad total

Toda la lógica será escalable, documentada y protegida

Si algo queda ambiguo, pedir aclaración antes de implementar.
Siempre preguntar al desarrollador antes de borrar o modificar lógica crítica.


### Progreso
- Migración de campos de permisos a JSON completada
- Limpieza automática de datos legacy en el login
